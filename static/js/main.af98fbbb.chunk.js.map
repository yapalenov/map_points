{"version":3,"sources":["common/getGeoInfo.js","components/Suggestions/index.js","components/Loader/index.js","containers/InputGroup/index.js","components/Layout/index.js","components/CustomMap/index.js","components/DnDList/index.js","containers/App/index.js","index.js"],"names":["getGeoInfo","address","a","fetch","method","headers","body","JSON","stringify","then","res","json","Suggestions","suggestions","addPointHandler","className","map","point","onMouseDown","e","key","value","Loader","Input","addPoint","ymaps","useState","inputValue","setInputValue","setSuggestions","allowSuggestions","setAllowSuggestions","load","setLoad","waitAddress","setWaitAddress","invalidAddress","setInvalidAddress","addAddress","id","uuid","catch","length","onChangeHandler","target","useEffect","timer","setTimeout","suggest","clearTimeout","Form","Control","type","placeholder","onChange","onFocus","onBlur","isInvalid","onKeyUp","keyCode","Button","disabled","variant","onClick","Layout","children","Container","as","Row","Col","CustomMap","points","changePoint","center","setYmaps","dragEndHandler","coordinates","reverse","join","point_info","status","dragCounter","query","onLoad","width","height","state","zoom","options","minZoom","geometry","lat","lon","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","onDrag","get","getCoordinates","properties","balloonContent","modules","onDragEnd","draggable","DndList","setPoints","deleteItem","prev","splice","dataset","index","result","destination","items","list","startIndex","endIndex","Array","from","removed","reorder","source","droppableId","provided","snapshot","droppableProps","ref","innerRef","isDraggingOver","item","draggableId","style","draggableProps","dragHandleProps","isDragging","data-index","App","setCenter","changedPoint","findIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af98fbbb.chunk.js","sourcesContent":["export const getGeoInfo = async address =>\n    fetch(\"https://ypalenov.ru/address_suggestions\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ address }),\n    }).then(res => res.json());\n","import React from \"react\";\n\nimport \"./index.scss\";\n\nconst Suggestions = ({ suggestions, addPointHandler }) => (\n    <ul className=\"suggestions\">\n        {suggestions.map(point => (\n            <li onMouseDown={e => addPointHandler(point)} key={point.value}>\n                {point.value}\n            </li>\n        ))}\n    </ul>\n);\n\nexport default Suggestions;\n","import React from \"react\";\n\nimport \"./index.scss\";\n\nconst Loader = () => (\n    <div className=\"loader-wrapper\">\n        <div className=\"lds-dual-ring\"></div>\n    </div>\n);\n\nexport default Loader;\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport uuid from \"uuid/v4\";\n\nimport { getGeoInfo } from \"../../common/getGeoInfo\";\n\nimport Suggestions from \"../../components/Suggestions\";\nimport Loader from \"../../components/Loader\";\n\nimport \"./index.scss\";\n\nconst Input = ({ addPoint, ymaps }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [suggestions, setSuggestions] = useState([]);\n    const [allowSuggestions, setAllowSuggestions] = useState(false);\n    const [load, setLoad] = useState(false);\n    const [waitAddress, setWaitAddress] = useState(false);\n    const [invalidAddress, setInvalidAddress] = useState(false);\n\n    const addAddress = async ({ value }) => {\n        setWaitAddress(true);\n        const point = await getGeoInfo(value)\n            .then(({ suggestions }) => ({ ...suggestions[0], id: uuid(), load: false }))\n            .catch(e => setWaitAddress(false) || setLoad(false) || setInvalidAddress(true));\n        if (point) addPoint(point);\n        setWaitAddress(false);\n    };\n    const addPointHandler = point => {\n        if (load) {\n            setWaitAddress(true);\n        } else if (inputValue && suggestions.length) {\n            setInputValue(\"\");\n            setSuggestions([]);\n            addAddress(point);\n        } else {\n            setInvalidAddress(true);\n        }\n    };\n\n    const onChangeHandler = async e => {\n        setInvalidAddress(false);\n        setInputValue(e.target.value);\n    };\n\n    useEffect(() => {\n        if (!ymaps) return;\n\n        setLoad(true);\n        const suggestionsRefreshTime = 0.2 * 1000;\n        const timer = setTimeout(async () => {\n            if (inputValue) {\n                const suggestions = await ymaps.suggest(inputValue);\n                setSuggestions(suggestions);\n                if (suggestions.length === 0) return setWaitAddress(false) || setLoad(false) || setInvalidAddress(true);\n                else setInvalidAddress(false);\n                if (waitAddress) {\n                    const point = suggestions[0];\n                    setInputValue(\"\");\n                    setSuggestions([]);\n                    addAddress(point);\n                    setWaitAddress(false);\n                }\n            } else setSuggestions([]);\n            setLoad(false);\n        }, suggestionsRefreshTime);\n        return () => clearTimeout(timer);\n    }, [inputValue, waitAddress, ymaps]);\n\n    return (\n        <div className=\"address-input-group\">\n            <div className=\"address-input-field\">\n                <Form.Control\n                    id=\"suggest\"\n                    type=\"text\"\n                    placeholder=\"Введите адрес\"\n                    value={inputValue}\n                    onChange={onChangeHandler}\n                    onFocus={() => setAllowSuggestions(true)}\n                    onBlur={() => setAllowSuggestions(false)}\n                    isInvalid={invalidAddress}\n                    onKeyUp={e => e.keyCode === 13 && addPointHandler(suggestions[0])}\n                />\n\n                {allowSuggestions && <Suggestions suggestions={suggestions} addPointHandler={addPointHandler} />}\n                {waitAddress && <Loader />}\n            </div>\n            <div className=\"add-button\">\n                <Button\n                    disabled={invalidAddress || waitAddress}\n                    className=\"ml-2\"\n                    variant=\"secondary\"\n                    onClick={() => addPointHandler(suggestions[0])}\n                >\n                    Добавить\n                </Button>\n                {invalidAddress && (\n                    <div className=\"invalid-address-feedback\">\n                        <span>\n                            Некорректный\n                            <br />\n                            адрес\n                        </span>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Input;\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./index.scss\";\n\nconst Layout = ({ children }) => {\n    return (\n        <Container className=\"my-3 p-3\" as=\"section\">\n            <Row>\n                <Col>{children}</Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default Layout;\n","import React, { useRef } from \"react\";\nimport { YMaps, Map, Placemark, Polyline } from \"react-yandex-maps\";\nimport { getGeoInfo } from \"../../common/getGeoInfo\";\n\nimport \"./index.scss\";\n\nconst CustomMap = ({ points, changePoint, center, setYmaps }) => {\n    const onLoad = ymaps => setYmaps(ymaps);\n\n    const dragEndHandler = async (coordinates, point) => {\n        changePoint({ ...point, load: true });\n        const point_info = await getGeoInfo([...coordinates].reverse().join(\",\"));\n        const address =\n            point_info.status === \"success\" && point_info.suggestions.length\n                ? point_info.suggestions[0].address\n                : point.address;\n\n        changePoint({ ...point, address, load: false });\n    };\n\n    // Define dragTriggerAttempt for update state not every time, it's important thing for optimization\n\n    const dragTriggerAttempt = 2;\n    let dragCounter = 0;\n\n    return (\n        <YMaps query={{ load: \"suggest\" }}>\n            <div className=\"map-container\">\n                <Map\n                    onLoad={onLoad}\n                    width=\"100%\"\n                    height=\"100%\"\n                    state={{ center: center, zoom: 9 }}\n                    options={{ minZoom: 3 }}\n                >\n                    <Polyline\n                        geometry={points.map(point => [point.coordinates.lat, point.coordinates.lon])}\n                        options={{\n                            balloonCloseButton: false,\n                            strokeColor: \"#000\",\n                            strokeWidth: 4,\n                            strokeOpacity: 0.5,\n                        }}\n                    />\n                    {points.map(point => (\n                        <Placemark\n                            key={point.id}\n                            onDrag={e =>\n                                ++dragCounter === dragTriggerAttempt &&\n                                changePoint({\n                                    ...point,\n                                    coordinates: {\n                                        lat: e.get(\"target\").geometry.getCoordinates()[0],\n                                        lon: e.get(\"target\").geometry.getCoordinates()[1],\n                                    },\n                                })\n                            }\n                            properties={{\n                                balloonContent: `<span>Адрес: ${point.address}</span><hr><span>Координаты: ${point.coordinates.lat}, ${point.coordinates.lon}</span>`,\n                            }}\n                            modules={[\"geoObject.addon.balloon\"]}\n                            // onClick={e => e.get(\"target\").balloon.open()}\n                            onDragEnd={e => dragEndHandler(e.get(\"target\").geometry.getCoordinates(), point)}\n                            options={{\n                                draggable: true,\n                            }}\n                            geometry={[point.coordinates.lat, point.coordinates.lon]}\n                        />\n                    ))}\n                </Map>\n            </div>\n        </YMaps>\n    );\n};\n\nexport default CustomMap;\n","import React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nimport Loader from \"../Loader\";\n\nimport \"./index.scss\";\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\nconst DndList = ({ points, setPoints }) => {\n    const onDragEnd = result => {\n        if (!result.destination) return;\n        const items = reorder(points, result.source.index, result.destination.index);\n        setPoints(items);\n    };\n\n    const deleteItem = e => {\n        const prev = [...points];\n        setPoints(prev.splice(e.target.dataset.index, 1) && prev);\n    };\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                    <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        className={!snapshot.isDraggingOver ? \"drag-list\" : \"drag-list active\"}\n                    >\n                        {points.map((item, index) => (\n                            <Draggable key={item.id} draggableId={item.id} index={index}>\n                                {(provided, snapshot) => (\n                                    <div\n                                        className=\"drag-item-wrapper padding-5\"\n                                        style={provided.draggableProps.style}\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                    >\n                                        <div className={!snapshot.isDragging ? \"drag-item\" : \"drag-item active\"}>\n                                            <div className=\"dnd-icon\"></div>\n                                            {item.address}\n                                            <div\n                                                className=\"delete-item-button\"\n                                                data-index={index}\n                                                onClick={deleteItem}\n                                            ></div>\n                                            {item.load && <Loader />}\n                                        </div>\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    );\n};\n\nexport default DndList;\n","import React, { useState } from \"react\";\n\nimport InputGroup from \"../InputGroup\";\n\nimport Layout from \"../../components/Layout\";\nimport CustomMap from \"../../components/CustomMap\";\nimport DnDList from \"../../components/DnDList\";\n\nimport \"./index.scss\";\n\nconst App = () => {\n    const [ymaps, setYmaps] = useState(null);\n    const [points, setPoints] = useState([]);\n    const [center, setCenter] = useState([55.75, 37.57]);\n\n    const addPoint = point =>\n        setCenter([point.coordinates.lat, point.coordinates.lon]) || setPoints([...points, point]);\n\n    const changePoint = changedPoint => {\n        const index = points.findIndex(point => point.id === changedPoint.id);\n        points[index] = changedPoint;\n        setPoints([...points]);\n    };\n\n    return (\n        <Layout>\n            <CustomMap setYmaps={setYmaps} center={center} points={points} changePoint={changePoint} />\n            <hr />\n            <InputGroup ymaps={ymaps} addPoint={addPoint} />\n            <hr />\n            <DnDList setPoints={setPoints} points={points} />\n        </Layout>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}